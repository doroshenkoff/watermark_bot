from datetime import datetime

import googlemaps
import locale
import requests

import config

from . import weather_constants as wc


class WeatherHandler:
    def __init__(self, city='Kiev', lat=None, lon=None):
        self.city = city
        self.lat = lat
        self.lon = lon


def format_time(time: int):
    return f'0{time}' if time < 10 else time


gmaps = googlemaps.Client(config.GOOGLE_API_KEY)


def get_location(params: WeatherHandler):
    if params.lat is None:
        try:
            loc = gmaps.geocode(params.city)[0]['geometry']['location']
        except:
            return None
        lat, lon = loc['lat'], loc['lng']
    else:
        lat, lon = params.lat, params.lon
    return lat, lon


def get_air_pollution(lat, lon):
    try:
        data = requests.get('http://api.openweathermap.org/data/2.5/air_pollution',
                            params={'lat': lat,
                                    'lon': lon,
                                    'appid': config.WEATHER_TOKEN}) \
            .json()
        index = data['list'][0]['main']['aqi']
        return ''.join('‚òÖ' if i < 6 - index else '‚ú©' for i in range(5))
    except:
        return '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'


def weather(params: WeatherHandler, sun=False):
    lat, lon = get_location(params)

    weather_payload = {
        'lat': lat,
        'lon': lon,
        'appid': config.WEATHER_TOKEN,
        'units': 'metric',
        'lang': 'ru'
    }

    weather = requests.get('https://api.openweathermap.org/data/2.5/weather', weather_payload).json()
    temp = round(weather['main']['temp'], 1)
    conditions = weather['weather'][0]['description'].capitalize()
    elevation = int(gmaps.elevation((lat, lon))[0]['elevation'])

    out = f'üèô –í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç - <b>{params.city}</b>\n'
    out += ''
    out += f'üèî –≤—ã—Å–æ—Ç–∞ - {elevation} –º –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è\n'
    out += ''
    out += f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ {"+" if temp > 0 else "-" if temp < 0 else ""}{temp}\n'
    out += ''
    out += f"{wc.WEATHER_ICONS.get(weather['weather'][0]['main'], '')} {conditions}"
    if sun:
        d_rise = datetime.fromtimestamp(weather['sys']['sunrise'] + weather['timezone'] - config.timezone)
        d_set = datetime.fromtimestamp(weather['sys']['sunset'] + weather['timezone'] - config.timezone)
        out += f'\nüå• –æ–±–ª–∞—á–Ω–æ—Å—Ç—å - {weather["clouds"]["all"]}%\n'
        out += f'üå¨ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - {weather["wind"]["speed"]} –º/c\n'
        out += f'üå¢ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {weather["main"]["humidity"]}%\n'
        out += f'ü´Ä –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - {int(weather["main"]["pressure"] * 0.750062)} –º–º —Ä—Ç.—Å—Ç.\n'
        out += f'üåÖ —Ä–∞—Å—Å–≤–µ—Ç - {format_time(d_rise.hour)}:{format_time(d_rise.minute)}\n'
        out += f'üåá –∑–∞–∫–∞—Ç - {format_time(d_set.hour)}:{format_time(d_set.minute)}\n'
        out += f'–∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ - {get_air_pollution(lat, lon)}'

    return out


def _get_forecast_data(view: str, params: WeatherHandler):
    url = 'https://api.openweathermap.org/data/2.5/onecall'
    lat, lon = get_location(params)
    exclude_view = 'current,minutely,hourly' if view == 'daily' else 'current,minutely,daily'
    weather_payload = {
        'lat': lat,
        'lon': lon,
        'appid': config.WEATHER_TOKEN,
        'units': 'metric',
        'lang': 'ru',
        'exclude': exclude_view,
    }
    data = requests.get(url, params=weather_payload).json()
    try:
        locale.setlocale(locale.LC_ALL, 'ru')
    except:
        pass
    return data


def weather_forecast(params: WeatherHandler):
    data = _get_forecast_data('daily', params)

    out = []

    for day in data['daily']:
        sunrise = datetime.fromtimestamp(day['sunrise'] + data['timezone_offset'] - config.timezone)
        sunset = datetime.fromtimestamp(day['sunset'] + data['timezone_offset'] - config.timezone)
        day_light = str(sunset - sunrise).split(':')
        s = f"<b><i>{datetime.fromtimestamp(day['dt']).strftime('%a, %d.%m')}</i></b>\n"
        s += f'—Ñ–∞–∑–∞ –ª—É–Ω—ã - {wc.MOON_PHASES[int(day["moon_phase"] / 0.125)]}\n'
        s += f'üåÖ —Ä–∞—Å—Å–≤–µ—Ç - {format_time(sunrise.hour)}:{format_time(sunrise.minute)}\n'
        s += f'üåá –∑–∞–∫–∞—Ç - {format_time(sunset.hour)}:{format_time(sunset.minute)}\n'
        s += f'‚òÄ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–≤–µ—Ç–æ–≤–æ–≥–æ –¥–Ω—è - {day_light[0]} —á–∞—Å–æ–≤, {day_light[1]} –º–∏–Ω—É—Ç\n\n'
        s += f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ {int(day["temp"]["min"])}¬∞ ... {int(day["temp"]["max"])}¬∞\n'
        s += f"{wc.WEATHER_ICONS.get(day['weather'][0]['main'], '')} {day['weather'][0]['description']}\n"
        if day.get('rain'):
            s += f'‚òî–û–∂–∏–¥–∞–µ–º—ã–µ –æ—Å–∞–¥–∫–∏ - {day["rain"]} –º–º, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è - {int(day["pop"] * 100)}%\n'
        s += f'üå¢ –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {day["humidity"]}%\n'
        s += f'ü´Ä –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - {int(day["pressure"] * 0.750062)} –º–º —Ä—Ç.—Å—Ç.\n'
        s += f'üå¨ –≤–µ—Ç–µ—Ä {wc.WIND_DIRECTIONS[day["wind_deg"] // 45]}, ' \
             f'—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - {int(day["wind_speed"])} –º/—Å, ' \
             f'{day.get("wind_gust") and ("–≤–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ä—ã–≤—ã –¥–æ " + str(int(day["wind_gust"])) + " –º/—Å")}\n'
        out.append(s)
    return out


def hourly_forecast(params: WeatherHandler):
    data = _get_forecast_data('hourly', params)
    out = ''
    for hour in data['hourly'][:16:2]:
        out += f"<b><i>{datetime.fromtimestamp(hour['dt']).strftime('%a, %d.%m, %H:%M')}</i></b>\n"
        out += f'üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ {int(hour["temp"])}¬∞\n'
        out += f'üíÅ –ü–æ –æ—â—É—â–µ–Ω–∏—è–º {int(hour["feels_like"])}¬∞\n'
        out += f"{wc.WEATHER_ICONS.get(hour['weather'][0]['main'], '')} {hour['weather'][0]['description']}\n"
        if hour.get('rain'):
            out += f'‚òî–û–∂–∏–¥–∞–µ–º—ã–µ –æ—Å–∞–¥–∫–∏ - {list(hour["rain"].values())[0]} –º–º\n'
        out += f'üíß–≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ - {hour["humidity"]}%\n'
        out += f'üå¨ –≤–µ—Ç–µ—Ä {wc.WIND_DIRECTIONS[hour["wind_deg"] // 45]}, ' \
               f'—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ - {int(hour["wind_speed"])} –º/—Å,\n\n'
    return out


def is_rain(params=WeatherHandler('Kiev')):
    data = _get_forecast_data('hourly', params)
    rain = False
    long = 0
    mm = 0
    for index, item in enumerate(data):
        if index == 5 and not rain:
            return 'No rain in nearest 5 hours'
        if item.get('rain'):
            if not rain:
                hour = datetime.fromtimestamp(item['dt']).strftime('%H:%M')
                rain = True
            long += 1
            mm += list(item["rain"].values())[0]
        elif rain:
            return f'–í–Ω–∏–º–∞–Ω–∏–µ! –≤ {hour} –Ω–∞—á–Ω–µ—Ç—Å—è –¥–æ–∂–¥—å! –û–∂–∏–¥–∞–µ—Ç—Å—è {mm} –æ—Å–∞–¥–∫–æ–≤ –∏ –æ–Ω –ø—Ä–æ–¥–ª–∏—Ç—Å—è {long} —á–∞—Å–∞(–æ–≤)'


# TODO: Create alert for rain. Beginning, end and quantity in MM. Check once per hour.

def get_rain_forecast(params: WeatherHandler):
    data = _get_forecast_data('hourly', params)
    for index, hour in enumerate(data['hourly'][:8]):
        if hour.get('rain'):
            count = 0
            quant = 0
            while data['hourly'][index + 1].get('rain'):
                count += 1
                quant += list(data['hourly'][index + 1]["rain"].values()[0])
                index += 1
